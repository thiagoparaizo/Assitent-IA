# ==============================================
# NOVO ARQUIVO: app/api/endpoints/whatsapp_notifications.py
# ==============================================

from datetime import datetime
from typing import Dict, Any
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from sqlalchemy.orm import Session
from pydantic import BaseModel, Field
import logging
from app.api.deps import get_db

from app.services.notification import NotificationService

logger = logging.getLogger('app.api.endpoints.whatsapp_notifications')
logging.basicConfig(level=logging.DEBUG)

router = APIRouter()

URL_PAINEL = "http://assistente-web-admin.iazera.cloud"

class WhatsAppDeviceNotification(BaseModel):
    device_id: int
    device_name: str
    tenant_id: int
    level: str  # info, warning, error, critical
    type: str
    title: str
    message: str
    timestamp: datetime
    details: Dict[str, Any] = Field(default_factory=dict)
    error_code: str = None
    suggested_action: str = None

@router.post("/whatsapp-notifications")
async def receive_whatsapp_notification(
    notification: WhatsAppDeviceNotification,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """
    Recebe notifica√ß√µes do servi√ßo WhatsApp sobre problemas de dispositivos
    """
    try:
        logger.info(f"Recebida notifica√ß√£o WhatsApp: {notification.type} para dispositivo {notification.device_id}")
        
        # Processar notifica√ß√£o em background
        background_tasks.add_task(
            process_whatsapp_notification,
            notification.dict(),
            db
        )
        
        return {"status": "received", "message": "Notifica√ß√£o processada"}
        
    except Exception as e:
        logger.error(f"Erro ao processar notifica√ß√£o WhatsApp: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def process_whatsapp_notification(notification_data: Dict[str, Any], db: Session):
    """
    Processa a notifica√ß√£o do WhatsApp em background
    
    """
    try:
        notification_service = NotificationService(db)
        
        # Determinar a√ß√µes baseadas no tipo de notifica√ß√£o
        notification_type = notification_data.get("type")
        level = notification_data.get("level")
        device_id = notification_data.get("device_id")
        tenant_id = notification_data.get("tenant_id")
        device_name = notification_data.get("device_name", f"Device {device_id}")
        
        # Buscar informa√ß√µes do tenant para personalizar notifica√ß√£o
        tenant_info = await get_tenant_info(tenant_id, db)
        tenant_name = tenant_info.get("name", f"Tenant {tenant_id}") if tenant_info else f"Tenant {tenant_id}"
        
        # USAR send_whatsapp_alert para cada tipo de notifica√ß√£o
        if notification_type == "client_outdated":
            await handle_client_outdated_notification(
                notification_data, tenant_name, notification_service
            )
        elif notification_type == "device_connection_error":
            await handle_connection_error_notification(
                notification_data, tenant_name, notification_service
            )
        elif notification_type == "device_requires_reauth":
            await handle_reauth_required_notification(
                notification_data, tenant_name, notification_service
            )
        elif notification_type == "webhook_delivery_failure":
            await handle_webhook_failure_notification(
                notification_data, tenant_name, notification_service
            )
        elif notification_type == "device_disconnected":
            await handle_device_disconnected_notification(
                notification_data, tenant_name, notification_service
            )
        else:
            # Notifica√ß√£o gen√©rica
            await handle_generic_notification(
                notification_data, tenant_name, notification_service
            )
            
        # Sempre enviar notifica√ß√£o geral para admins se for cr√≠tico
        if level == "critical":
            await send_critical_alert_to_admins(notification_data, tenant_name, notification_service)
            
        logger.info(f"Notifica√ß√£o WhatsApp processada: {notification_type} para dispositivo {device_id}")
        
    except Exception as e:
        logger.error(f"Erro ao processar notifica√ß√£o WhatsApp em background: {e}")

async def handle_client_outdated_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata notifica√ß√µes de cliente desatualizado - CR√çTICO
    USA send_whatsapp_alert para admins t√©cnicos
    """
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    # Buscar contatos de administra√ß√£o t√©cnica
    admin_emails = await get_admin_emails_for_tenant(tenant_id)
    
    message=f"""üö®üö® A√á√ÉO URGENTE NECESS√ÅRIA üö®üö® - Cliente WhatsApp Desatualizado
            
Dispositivo: {device_name} (ID: {device_id})
Tenant: {tenant_name}

O cliente WhatsApp est√° usando uma vers√£o desatualizada e foi rejeitado pelo WhatsApp.

A√á√ÉO IMEDIATA NECESS√ÅRIA:
1. Atualizar biblioteca whatsmeow para a vers√£o mais recente
2. Recompilar e reiniciar o servi√ßo WhatsApp
3. Reconectar todos os dispositivos afetados

‚ö†Ô∏è‚ö†Ô∏è Sem essa atualiza√ß√£o, TODOS os dispositivos podem parar de funcionar.‚ö†Ô∏è‚ö†Ô∏è""",
            
        
    
     # USAR send_whatsapp_alert para cada admin
    for email in admin_emails:
        success = await notification_service.send_whatsapp_alert(
            alert_type="whatsapp_critical",
            tenant_id=tenant_id,
            tenant_name=tenant_name,
            device_id=device_id,
            device_name=device_name,
            level="critical",
            message=message,
            channel="email",
            target=email,
            custom_subject="üö® URGENTE: Cliente WhatsApp Desatualizado",
        )
        
        if success:
            logger.info(f"Alerta cr√≠tico enviado para {email}")
        else:
            logger.error(f"Falha ao enviar alerta cr√≠tico para {email}")
    
    # Criar ticket interno se sistema de tickets estiver integrado
    await create_internal_ticket({
        "title": f"URGENTE: Cliente WhatsApp desatualizado - {tenant_name}",
        "description": message,
        "priority": "critical",
        "category": "whatsapp_infrastructure",
        "tenant_id": tenant_id,
        "assigned_team": "infrastructure"
    })

async def handle_connection_error_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata erros de conex√£o de dispositivos
    USA send_whatsapp_alert para notificar o tenant
    """
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    
    tenant_contacts = await get_tenant_notification_contacts(tenant_id)
    
    for contact in tenant_contacts:
        if contact.get("email"):
            await notification_service.send_whatsapp_alert(
                alert_type="whatsapp_connection",
                tenant_id=tenant_id,
                tenant_name=tenant_name,
                device_id=device_id,
                device_name=device_name,
                level="error",
                message=f"""‚ùå Problema de Conex√£o - WhatsApp

Dispositivo: {device_name}
Problema: {notification_data.get('message', 'Erro de conex√£o detectado')}

O que estamos fazendo:
‚Ä¢ Tentando reconectar automaticamente
‚Ä¢ Monitorando a situa√ß√£o

O que voc√™ pode fazer:
‚Ä¢ Verificar se seu dispositivo est√° conectado √† internet
‚Ä¢ Se o problema persistir, pode ser necess√°rio reautenticar o dispositivo

Entraremos em contato se precisarmos de a√ß√µes adicionais.""",
                channel="email",
                target=contact["email"],
                custom_subject=f"Problema de Conex√£o - {device_name}",
            )


async def handle_reauth_required_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata notifica√ß√µes de reautentica√ß√£o necess√°ria
    USA send_whatsapp_alert para contatos do tenant
    """
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    
    # Buscar contatos do tenant
    tenant_contacts = await get_tenant_notification_contacts(tenant_id)
    
    # USAR send_whatsapp_alert para cada contato
    for contact in tenant_contacts:
        if contact.get("email"):
            success = await notification_service.send_whatsapp_alert(
                alert_type="whatsapp_reauth",
                tenant_id=tenant_id,
                tenant_name=tenant_name,
                device_id=device_id,
                device_name=device_name,
                level="warning",
                message=f"""‚ö†Ô∏è Reautentica√ß√£o Necess√°ria - WhatsApp

Ol√°,
    
    Seu dispositivo WhatsApp precisa ser reautenticado:
    
    Dispositivo: {device_name}
    
    Para reativar o dispositivo:
    1. Acesse o painel de controle
    2. V√° para a se√ß√£o WhatsApp
    3. Clique em "Reconectar" no dispositivo {device_name}
    4. Use o WhatsApp no seu celular para escanear o novo QR Code
    
    Link direto: {URL_PAINEL}/whatsapp/devices/{device_id}
    
    Se precisar de ajuda, entre em contato conosco.
    
    Equipe T√©cnica
    {URL_PAINEL}""",
                channel="email",
                target=contact["email"],
                custom_subject=f"Reautentica√ß√£o Necess√°ria - {device_name}",
            )
            
            if success:
                logger.info(f"Alerta de reauth enviado para {contact['email']}")
            else:
                logger.error(f"Falha ao enviar alerta de reauth para {contact['email']}")

async def handle_webhook_failure_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata falhas consecutivas de webhook
    USA send_whatsapp_alert para admins t√©cnicos
    """
    device_id = notification_data["device_id"]
    tenant_id = notification_data["tenant_id"]
    
    details = notification_data.get("details", {})
    consecutive_failures = details.get("consecutive_failures", 0)
    webhook_url = details.get("webhook_url", "")
    
    if consecutive_failures >= 5:
        admin_emails = await get_admin_emails_for_tenant(tenant_id)
        
        for email in admin_emails:
            await notification_service.send_whatsapp_alert(
                alert_type="whatsapp_webhook",
                tenant_id=tenant_id,
                tenant_name=tenant_name,
                device_id=device_id,
                device_name=notification_data.get("device_name", "N/A"),
                level="error",
                message=f"""üîó Falha Cr√≠tica de Webhook - WhatsApp

Tenant: {tenant_name}
Webhook: {webhook_url}
Falhas Consecutivas: {consecutive_failures}

O webhook configurado est√° falhando consistentemente.

Verifica√ß√µes necess√°rias:
1. URL do webhook est√° acess√≠vel?
2. Servidor de destino est√° respondendo?
3. Configura√ß√£o de autentica√ß√£o est√° correta?

Considere desabilitar o webhook temporariamente se o problema persistir.""",
                channel="email",
                target=email,
                custom_subject=f"Falha Cr√≠tica de Webhook - {tenant_name}",
            )

async def handle_device_disconnected_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata notifica√ß√µes de dispositivo desconectado
    """
    device_id = notification_data["device_id"]
    tenant_id = notification_data["tenant_id"]
    device_name = notification_data["device_name"]
    # Para desconex√µes, apenas logar e aguardar reconex√£o autom√°tica
    # S√≥ notificar se a desconex√£o persistir por muito tempo
    logger.info(f"Dispositivo {device_name} (ID: {device_id}) do tenant {tenant_name} (ID: {tenant_id}) desconectado")
    pass

async def handle_generic_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata notifica√ß√µes gen√©ricas
    USA send_whatsapp_alert de forma gen√©rica
    """
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    level = notification_data["level"]
    message = notification_data["message"]
    title = notification_data["title"]
    
    # Determinar quem deve receber baseado no n√≠vel
    if level in ["critical", "error"]:
        admin_emails = await get_admin_emails_for_tenant(tenant_id)
        
        for email in admin_emails:
            await notification_service.send_whatsapp_alert(
                alert_type="whatsapp_generic",
                tenant_id=tenant_id,
                tenant_name=tenant_name,
                device_id=device_id,
                device_name=device_name,
                level=level,
                message=f"{title}\n\n{message}",
                channel="email",
                target=email,
                custom_subject=f"[{level.upper()}] WhatsApp - {title}",
            )

async def send_critical_alert_to_admins(notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Envia alertas cr√≠ticos para administradores do sistema
    """
    system_admin_emails = await get_system_admin_emails()
    
    critical_message = f"""
    üö® ALERTA CR√çTICO - Sistema WhatsApp
    
    Um problema cr√≠tico foi detectado no sistema WhatsApp:
    
    Tenant: {tenant_name} (ID: {notification_data['tenant_id']})
    Dispositivo: {notification_data['device_name']} (ID: {notification_data['device_id']})
    Tipo: {notification_data['alert_type']}
    Erro: {notification_data.get('error_code', 'N/A')}
    
    Detalhes: {notification_data['message']}
    
    A√ß√£o Sugerida: {notification_data.get('suggested_action', 'Verificar logs e status do sistema')}
    
    Timestamp: {notification_data['timestamp']}
    
    ‚ö†Ô∏è Este alerta requer aten√ß√£o imediata da equipe t√©cnica.
    """
    
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    message = notification_data["message"]
    title = notification_data["title"]
    
    for email in system_admin_emails:
        
        success = await notification_service.send_whatsapp_alert(
            alert_type="whatsapp_critical",
            tenant_id=tenant_id,
            tenant_name=tenant_name,
            device_id=device_id,
            device_name=device_name,
            level="critical",
            message=message,
            channel="email",
            target=email,
            custom_subject="üö® URGENTE: Erro Cr√≠tico",
        )
        
        if success:
            logger.info(f"Alerta cr√≠tico enviado para {email}")
        else:
            logger.error(f"Erro ao enviar alerta cr√≠tico para {email}")

# Fun√ß√µes auxiliares

async def get_tenant_info(tenant_id: int, db: Session) -> Dict[str, Any]:
    """Busca informa√ß√µes do tenant"""
    try:
        # Implementar busca no banco de dados
        # Exemplo simplificado:
        query = "SELECT name, contact_email FROM tenants WHERE id = %s"
        result = db.execute(query, (tenant_id,)).fetchone()
        if result:
            return {"name": result[0], "contact_email": result[1]}
    except Exception as e:
        logger.error(f"Erro ao buscar info do tenant {tenant_id}: {e}")
    
    return {}

async def get_tenant_notification_contacts(tenant_id: int) -> list:
    """Busca contatos de notifica√ß√£o do tenant"""
    try:
        # TODO Implementar busca de contatos do tenant
        # Pode incluir: email principal, contatos t√©cnicos, etc.
        return [
            {"email": "thiago.paraizo@gmail.com", "type": "primary"},
            {"email": "homeparaizo@gmail.com", "type": "technical"}
        ]
    except Exception as e:
        logger.error(f"Erro ao buscar contatos do tenant {tenant_id}: {e}")
        return []

async def get_admin_emails_for_tenant(tenant_id: int) -> list:
    """Busca emails de administradores t√©cnicos respons√°veis pelo tenant"""
    try:
        # Implementar busca de admins respons√°veis
        return ["thiagoparaizo@gmail.com"]
    except Exception as e:
        logger.error(f"Erro ao buscar admins do tenant {tenant_id}: {e}")
        return []

async def get_system_admin_emails() -> list:
    """Busca emails de administradores do sistema"""
    return ["thiagoparaizo@gmail.com"]

async def create_internal_ticket(ticket_data: Dict[str, Any]):
    """Cria ticket interno no sistema de suporte (se integrado)"""
    try:
        # Implementar integra√ß√£o com sistema de tickets
        # Ex: Jira, ServiceNow, etc.
        logger.info(f"Ticket criado: {ticket_data['title']}")
    except Exception as e:
        logger.error(f"Erro ao criar ticket interno: {e}")

