# app/api/endpoints/whatsapp_notifications.py
# Vers√£o atualizada com integra√ß√£o aos novos templates HTML

from datetime import datetime
from typing import Dict, Any
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from sqlalchemy.orm import Session
from pydantic import BaseModel, Field
import logging
from app.api.deps import get_db

from app.services.notification import NotificationService

logger = logging.getLogger('app.api.endpoints.whatsapp_notifications')
logging.basicConfig(level=logging.DEBUG)

router = APIRouter()

URL_PAINEL = "http://assistente-web-admin.iazera.cloud"

class WhatsAppDeviceNotification(BaseModel):
    device_id: int
    device_name: str
    tenant_id: int
    level: str  # info, warning, error, critical
    type: str
    title: str
    message: str
    timestamp: datetime
    details: Dict[str, Any] = Field(default_factory=dict)
    error_code: str = None
    suggested_action: str = None

@router.post("/notificar_saude_dispositivos")
async def receive_whatsapp_notification(
    notification: WhatsAppDeviceNotification,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """
    Recebe notifica√ß√µes do servi√ßo WhatsApp sobre problemas de dispositivos
    """
    try:
        logger.info(f"Recebida notifica√ß√£o WhatsApp: {notification.type} para dispositivo {notification.device_id}")
        
        # Processar notifica√ß√£o em background
        background_tasks.add_task(
            process_whatsapp_notification,
            notification.dict(),
            db
        )
        
        return {"status": "received", "message": "Notifica√ß√£o processada"}
        
    except Exception as e:
        logger.error(f"Erro ao processar notifica√ß√£o WhatsApp: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def process_whatsapp_notification(notification_data: Dict[str, Any], db: Session):
    """
    Processa a notifica√ß√£o do WhatsApp em background
    """
    try:
        notification_service = NotificationService(db)
        
        # Determinar a√ß√µes baseadas no tipo de notifica√ß√£o
        notification_type = notification_data.get("type")
        level = notification_data.get("level")
        device_id = notification_data.get("device_id")
        tenant_id = notification_data.get("tenant_id")
        device_name = notification_data.get("device_name", f"Device {device_id}")
        
        # Buscar informa√ß√µes do tenant para personalizar notifica√ß√£o
        tenant_info = await get_tenant_info(tenant_id, db)
        tenant_name = tenant_info.get("name", f"Tenant {tenant_id}") if tenant_info else f"Tenant {tenant_id}"
        
        # Processar cada tipo de notifica√ß√£o
        if notification_type == "client_outdated":
            await handle_client_outdated_notification(
                notification_data, tenant_name, notification_service
            )
        elif notification_type == "device_connection_error":
            await handle_connection_error_notification(
                notification_data, tenant_name, notification_service
            )
        elif notification_type == "device_requires_reauth":
            await handle_reauth_required_notification(
                notification_data, tenant_name, notification_service
            )
        elif notification_type == "webhook_delivery_failure":
            await handle_webhook_failure_notification(
                notification_data, tenant_name, notification_service
            )
        elif notification_type == "device_disconnected":
            await handle_device_disconnected_notification(
                notification_data, tenant_name, notification_service
            )
        else:
            # Notifica√ß√£o gen√©rica
            await handle_generic_notification(
                notification_data, tenant_name, notification_service
            )
            
        # Sempre enviar notifica√ß√£o geral para admins se for cr√≠tico
        if level == "critical":
            await send_critical_alert_to_admins(notification_data, tenant_name, notification_service)
            
        logger.info(f"Notifica√ß√£o WhatsApp processada: {notification_type} para dispositivo {device_id}")
        
    except Exception as e:
        logger.error(f"Erro ao processar notifica√ß√£o WhatsApp em background: {e}")

async def handle_client_outdated_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata notifica√ß√µes de cliente desatualizado - CR√çTICO
    """
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    
    admin_emails = await get_admin_emails_for_tenant(tenant_id)
    
    details = {
        "Dispositivo": f"{device_name} (ID: {device_id})",
        "Tenant": f"{tenant_name} (ID: {tenant_id})",
        "Problema": "Cliente WhatsApp desatualizado",
        "Criticidade": "ALTA - A√ß√£o Imediata Necess√°ria",
        "Impacto": "Todos os dispositivos podem parar de funcionar"
    }
    
    message = """Foi detectado que o cliente WhatsApp est√° usando uma vers√£o desatualizada e foi rejeitado pelo WhatsApp.
    
    <strong>Este √© um problema cr√≠tico que requer a√ß√£o imediata para evitar interrup√ß√£o total do servi√ßo.</strong>"""
    
    suggested_action = """A√á√ÉO IMEDIATA NECESS√ÅRIA:
    
    1. Atualizar biblioteca whatsmeow para a vers√£o mais recente
    2. Recompilar e reiniciar o servi√ßo WhatsApp
    3. Reconectar todos os dispositivos afetados
    4. Verificar se todos os tenants foram impactados
    
    ‚ö†Ô∏è Sem essa atualiza√ß√£o, TODOS os dispositivos podem parar de funcionar permanentemente."""
    
    for email in admin_emails:
        success = await notification_service.send_whatsapp_alert(
            alert_type="whatsapp_critical_update",
            tenant_id=tenant_id,
            tenant_name=tenant_name,
            device_id=device_id,
            device_name=device_name,
            level="critical",
            message=message,
            channel="email",
            target=email,
            custom_subject="üö® URGENTE: Cliente WhatsApp Desatualizado - A√ß√£o Imediata Necess√°ria",
            suggested_action=suggested_action,
            details=details
        )
        
        if success:
            logger.info(f"Alerta cr√≠tico enviado para {email}")
        else:
            logger.error(f"Falha ao enviar alerta cr√≠tico para {email}")
    
    # Criar ticket interno se sistema de tickets estiver integrado
    await create_internal_ticket({
        "title": f"URGENTE: Cliente WhatsApp desatualizado - {tenant_name}",
        "description": message,
        "priority": "critical",
        "category": "whatsapp_infrastructure",
        "tenant_id": tenant_id,
        "assigned_team": "infrastructure"
    })

async def handle_connection_error_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata erros de conex√£o de dispositivos
    """
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    
    tenant_contacts = await get_tenant_notification_contacts(tenant_id)
    
    details = {
        "Dispositivo": f"{device_name} (ID: {device_id})",
        "Tenant": f"{tenant_name} (ID: {tenant_id})",
        "Problema": notification_data.get('message', 'Erro de conex√£o detectado'),
        "Status": "Tentando reconectar automaticamente",
        "Pr√≥ximos Passos": "Monitoramento autom√°tico ativo"
    }
    
    message = """Detectamos um problema de conex√£o com seu dispositivo WhatsApp.
    
    <strong>N√£o se preocupe:</strong> Estamos tentando reconectar automaticamente e monitorando a situa√ß√£o de perto."""
    
    suggested_action = """O que estamos fazendo:
    ‚Ä¢ Tentativas autom√°ticas de reconex√£o a cada 30 segundos
    ‚Ä¢ Monitoramento cont√≠nuo do status de conectividade
    ‚Ä¢ Logs detalhados para an√°lise t√©cnica
    
    O que voc√™ pode fazer:
    ‚Ä¢ Verificar se sua internet est√° est√°vel
    ‚Ä¢ Aguardar alguns minutos para reconex√£o autom√°tica
    ‚Ä¢ Se o problema persistir por mais de 10 minutos, pode ser necess√°rio reautenticar
    
    Entraremos em contato se precisarmos de a√ß√µes adicionais de sua parte."""
    
    for contact in tenant_contacts:
        if contact.get("email"):
            await notification_service.send_whatsapp_alert(
                alert_type="whatsapp_connection",
                tenant_id=tenant_id,
                tenant_name=tenant_name,
                device_id=device_id,
                device_name=device_name,
                level="warning",
                message=message,
                channel="email",
                target=contact["email"],
                custom_subject=f"‚ö†Ô∏è Problema de Conex√£o Detectado - {device_name}",
                suggested_action=suggested_action,
                details=details
            )

async def handle_reauth_required_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata notifica√ß√µes de reautentica√ß√£o necess√°ria
    """
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    
    tenant_contacts = await get_tenant_notification_contacts(tenant_id)
    
    details = {
        "Dispositivo": f"{device_name} (ID: {device_id})",
        "Tenant": f"{tenant_name} (ID: {tenant_id})",
        "A√ß√£o Necess√°ria": "Reautentica√ß√£o via QR Code",
        "Tempo Estimado": "2-3 minutos",
        "Link Direto": f"{URL_PAINEL}/whatsapp/devices/{device_id}"
    }
    
    message = """Seu dispositivo WhatsApp precisa ser reautenticado para continuar funcionando normalmente.
    
    <strong>Este √© um procedimento de seguran√ßa normal</strong> que acontece periodicamente para manter a conex√£o segura."""
    
    suggested_action = f"""Para reativar seu dispositivo:
    
    1. <strong>Acesse o painel:</strong> {URL_PAINEL}/whatsapp/devices/{device_id}
    2. <strong>Clique em "Reconectar"</strong> no dispositivo {device_name}
    3. <strong>Escaneie o QR Code</strong> com o WhatsApp do seu celular
    4. <strong>Aguarde a confirma√ß√£o</strong> de conex√£o
    
    üì± <strong>Como escanear:</strong>
    ‚Ä¢ Abra o WhatsApp no seu celular
    ‚Ä¢ V√° em Configura√ß√µes > Aparelhos conectados
    ‚Ä¢ Toque em "Conectar um aparelho"
    ‚Ä¢ Aponte a c√¢mera para o QR Code
    
    Se precisar de ajuda, nossa equipe est√° dispon√≠vel para auxiliar."""
    
    for contact in tenant_contacts:
        if contact.get("email"):
            success = await notification_service.send_whatsapp_alert(
                alert_type="whatsapp_reauth",
                tenant_id=tenant_id,
                tenant_name=tenant_name,
                device_id=device_id,
                device_name=device_name,
                level="warning",
                message=message,
                channel="email",
                target=contact["email"],
                custom_subject=f"üîê Reautentica√ß√£o Necess√°ria - {device_name}",
                suggested_action=suggested_action,
                details=details
            )
            
            if success:
                logger.info(f"Alerta de reauth enviado para {contact['email']}")
            else:
                logger.error(f"Falha ao enviar alerta de reauth para {contact['email']}")

async def handle_webhook_failure_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata falhas consecutivas de webhook
    """
    device_id = notification_data["device_id"]
    tenant_id = notification_data["tenant_id"]
    device_name = notification_data.get("device_name", "Sistema")
    
    details_data = notification_data.get("details", {})
    consecutive_failures = details_data.get("consecutive_failures", 0)
    webhook_url = details_data.get("webhook_url", "")
    last_error = details_data.get("last_error", "Timeout de conex√£o")
    
    if consecutive_failures >= 5:
        admin_emails = await get_admin_emails_for_tenant(tenant_id)
        
        details = {
            "Tenant": f"{tenant_name} (ID: {tenant_id})",
            "Webhook URL": webhook_url,
            "Falhas Consecutivas": str(consecutive_failures),
            "√öltimo Erro": last_error,
            "Impacto": "Notifica√ß√µes podem n√£o estar sendo entregues",
            "Status": "Webhook temporariamente desabilitado"
        }
        
        message = """O webhook configurado est√° falhando consistentemente e pode estar impactando a entrega de notifica√ß√µes.
        
        <strong>A√ß√£o necess√°ria:</strong> Verifica√ß√£o e corre√ß√£o da configura√ß√£o do webhook para restaurar as notifica√ß√µes."""
        
        suggested_action = """Verifica√ß√µes necess√°rias:
        
        1. <strong>Conectividade:</strong> URL do webhook est√° acess√≠vel?
        2. <strong>Servidor:</strong> Aplica√ß√£o de destino est√° respondendo?
        3. <strong>Autentica√ß√£o:</strong> Credenciais est√£o corretas?
        4. <strong>Firewall:</strong> Portas necess√°rias est√£o abertas?
        5. <strong>SSL:</strong> Certificados est√£o v√°lidos?
        
        <strong>A√ß√µes recomendadas:</strong>
        ‚Ä¢ Testar manualmente a URL do webhook
        ‚Ä¢ Verificar logs do servidor de destino
        ‚Ä¢ Considerar desabilitar temporariamente se o problema persistir
        ‚Ä¢ Configurar webhook alternativo se necess√°rio"""
        
        for email in admin_emails:
            await notification_service.send_whatsapp_alert(
                alert_type="webhook_failure",
                tenant_id=tenant_id,
                tenant_name=tenant_name,
                device_id=device_id,
                device_name=device_name,
                level="error",
                message=message,
                channel="email",
                target=email,
                custom_subject=f"üîó Falha Cr√≠tica de Webhook - {tenant_name}",
                suggested_action=suggested_action,
                details=details,
                error_code=f"WEBHOOK_FAIL_{consecutive_failures}"
            )

async def handle_device_disconnected_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata notifica√ß√µes de dispositivo desconectado
    """
    device_id = notification_data["device_id"]
    tenant_id = notification_data["tenant_id"]
    device_name = notification_data["device_name"]
    
    # Para desconex√µes, apenas logar - reconex√£o autom√°tica √© tentada
    logger.info(f"Dispositivo {device_name} (ID: {device_id}) do tenant {tenant_name} (ID: {tenant_id}) desconectado")
    
    # Notificar apenas se a desconex√£o persistir (isso seria implementado com delay)
    # Por enquanto, apenas log

async def handle_generic_notification(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Trata notifica√ß√µes gen√©ricas
    """
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    level = notification_data["level"]
    message = notification_data["message"]
    title = notification_data["title"]
    
    # Determinar quem deve receber baseado no n√≠vel
    if level in ["critical", "error"]:
        admin_emails = await get_admin_emails_for_tenant(tenant_id)
        
        details = {
            "Dispositivo": f"{device_name} (ID: {device_id})",
            "Tenant": f"{tenant_name} (ID: {tenant_id})",
            "Tipo de Alerta": title,
            "N√≠vel": level.upper(),
            "Timestamp": notification_data.get("timestamp", datetime.now().isoformat())
        }
        
        formatted_message = f"""<strong>{title}</strong>
        
        {message}"""
        
        suggested_action = notification_data.get("suggested_action", 
            "Verifique os logs do sistema e entre em contato com o suporte t√©cnico se necess√°rio.")
        
        for email in admin_emails:
            await notification_service.send_whatsapp_alert(
                alert_type="whatsapp_generic",
                tenant_id=tenant_id,
                tenant_name=tenant_name,
                device_id=device_id,
                device_name=device_name,
                level=level,
                message=formatted_message,
                channel="email",
                target=email,
                custom_subject=f"üîî [{level.upper()}] WhatsApp - {title}",
                suggested_action=suggested_action,
                details=details
            )

async def send_critical_alert_to_admins(
    notification_data: Dict[str, Any], 
    tenant_name: str, 
    notification_service: NotificationService
):
    """
    Envia alertas cr√≠ticos para administradores do sistema
    """
    system_admin_emails = await get_system_admin_emails()
    
    device_id = notification_data["device_id"]
    device_name = notification_data["device_name"]
    tenant_id = notification_data["tenant_id"]
    
    details = {
        "Tenant": f"{tenant_name} (ID: {tenant_id})",
        "Dispositivo": f"{device_name} (ID: {device_id})",
        "Tipo de Alerta": notification_data.get("type", "unknown"),
        "N√≠vel": "CRITICAL",
        "C√≥digo de Erro": notification_data.get("error_code", "N/A"),
        "Timestamp": notification_data.get("timestamp", datetime.now().isoformat())
    }
    
    message = f"""<strong>ALERTA CR√çTICO detectado no sistema WhatsApp</strong>
    
    Um problema cr√≠tico foi identificado e requer aten√ß√£o imediata da equipe t√©cnica.
    
    <strong>Detalhes:</strong> {notification_data.get('message', 'Erro cr√≠tico n√£o especificado')}"""
    
    suggested_action = f"""{notification_data.get('suggested_action', 'Verificar logs e status do sistema')}
    
    <strong>A√ß√µes imediatas recomendadas:</strong>
    ‚Ä¢ Verificar logs detalhados do sistema
    ‚Ä¢ Avaliar impacto em outros tenants
    ‚Ä¢ Preparar comunica√ß√£o para clientes se necess√°rio
    ‚Ä¢ Considerar acionamento de protocolo de emerg√™ncia"""
    
    for email in system_admin_emails:
        success = await notification_service.send_whatsapp_alert(
            alert_type="system_critical",
            tenant_id=tenant_id,
            tenant_name=tenant_name,
            device_id=device_id,
            device_name=device_name,
            level="critical",
            message=message,
            channel="email",
            target=email,
            custom_subject="üö® ALERTA CR√çTICO - Sistema WhatsApp - A√ß√£o Imediata Necess√°ria",
            suggested_action=suggested_action,
            details=details,
            error_code=notification_data.get("error_code")
        )
        
        if success:
            logger.info(f"Alerta cr√≠tico enviado para {email}")
        else:
            logger.error(f"Erro ao enviar alerta cr√≠tico para {email}")

# Fun√ß√µes auxiliares (mantidas inalteradas)

async def get_tenant_info(tenant_id: int, db: Session) -> Dict[str, Any]:
    """Busca informa√ß√µes do tenant"""
    try:
        from app.db.models.tenant import Tenant
        from sqlalchemy import select
        
        query = select(Tenant).where(Tenant.id == tenant_id)
        result = db.execute(query)
        if result:
            tenant = result.scalar_one_or_none()
            if tenant:
                return {"name": tenant.name, "description": tenant.description}
        
    except Exception as e:
        logger.error(f"Erro ao buscar info do tenant {tenant_id}: {e}")
    
    return {}

async def get_tenant_notification_contacts(tenant_id: int) -> list:
    """Busca contatos de notifica√ß√£o do tenant"""
    try:
        # TODO: Implementar busca de contatos do tenant
        return [
            {"email": "thiago.paraizo@gmail.com", "type": "primary"},
            {"email": "homeparaizo@gmail.com", "type": "technical"}
        ]
    except Exception as e:
        logger.error(f"Erro ao buscar contatos do tenant {tenant_id}: {e}")
        return []

async def get_admin_emails_for_tenant(tenant_id: int) -> list:
    """Busca emails de administradores t√©cnicos respons√°veis pelo tenant"""
    try:
        # TODO: Implementar busca de admins respons√°veis
        return ["thiagoparaizo@gmail.com"]
    except Exception as e:
        logger.error(f"Erro ao buscar admins do tenant {tenant_id}: {e}")
        return []

async def get_system_admin_emails() -> list:
    """Busca emails de administradores do sistema"""
    return ["thiagoparaizo@gmail.com"]

async def create_internal_ticket(ticket_data: Dict[str, Any]):
    """Cria ticket interno no sistema de suporte (se integrado)"""
    try:
        # TODO: Implementar integra√ß√£o com sistema de tickets
        logger.info(f"Ticket criado: {ticket_data['title']}")
    except Exception as e:
        logger.error(f"Erro ao criar ticket interno: {e}")